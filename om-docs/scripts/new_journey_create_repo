#!/usr/bin/python
"""

Creates new journey based on our journey template, it copies the repo,
labels, and issues.

To run it:

  $ export GH_USER=some_user
  $ export GH_PASS=some_token
  $ python scripts/new_journey_create_repo new_repo_name

To create a Github token, access your profile settings and navigate
to the "Personal Access Tokens" menu.

"""

import os
import sys
from github import Github
from github import GithubException

#==== configurations =======
username = os.environ.get("GH_USER", None)
if not username:
    raise RuntimeError("Set environment variable GH_USER to your github user")

# set up a personal access token for this:
password = os.environ.get("GH_PASS", None)
if not password:
    raise RuntimeError("Set environment variable GH_PASS (access token)")

github_org = "om-docs"
journey_template = "journey-template"

#==== end of configurations ===
server = "https://github.ibm.com/api/v3"

# First create a Github instance:
g = Github(username, password, server)


if len(sys.argv) > 1:
    new_journey = sys.argv[1]
else:
    print "Usage: new_journey <new_journey_name>"
    raise SystemExit

def create_repo():
    print "Prepared to create new journey repo at: %s/%s" % (github_org, new_journey)

    print "    checking if %s/%s already exists" % (github_org, new_journey)
    repoExists = True
    try:
        repo = g.get_organization(github_org).get_repo(new_journey)
    except GithubException, exception:
        if exception.status == 404:
            repoExists = False
        else:
            print exception
            print "    something went wrong"
            return False

    if repoExists:
        print "    %s/%s already exists" % (github_org, new_journey)
        return False
    else:
        print "    creating repo %s/%s" % (github_org, new_journey)
        g.get_organization(github_org).create_repo(name=new_journey)

    return True

def labels_list(org,repo):
    existing = []
    labels = g.get_organization(org).get_repo(name=repo).get_labels()
    for label in labels:
        existing.append(label.name)
    return existing

def copy_labels():
    print "collecting labels from %s/%s" % (github_org, journey_template)
    labels = g.get_organization(github_org).get_repo(name=journey_template).get_labels()
    existing_labels = labels_list(github_org, new_journey)
    for label in labels:
        if label.name not in existing_labels:
            print "    importing label '%s' to %s/%s" % (label.name, github_org, new_journey)
            g.get_organization(github_org).get_repo(name=new_journey).create_label(
                name=label.name, color=label.color)
        else:
            print "    label '%s' already exists in %s/%s" % (label.name, github_org, new_journey)

def issues_list(org,repo):
    existing = []
    issues = g.get_organization(org).get_repo(name=repo).get_issues()
    for issue in issues:
        existing.append(issue.title)
    return existing

def copy_issues():
    print "collecting issues from %s/%s" % (github_org, journey_template)
    issues = g.get_organization(github_org).get_repo(name=journey_template).get_issues()
    existing_issues = issues_list(github_org,new_journey)
    for issue in issues:
        if issue.title not in existing_issues and issue.state == "open":
            print "    importing issue '%s' to %s/%s" % (issue.title, github_org, new_journey)
            g.get_organization(github_org).get_repo(name=new_journey).create_issue(
                title=issue.title, body=issue.body, labels=issue.labels)
        else:
            print "    issue '%s' already exists in %s/%s" % (issue.title, github_org, new_journey)

def main():
    if create_repo():
        copy_labels()
        copy_issues()
        git_url = g.get_organization(github_org).get_repo(new_journey).html_url
        print "Your new Repo is available at: %s" % (git_url)


if __name__ == '__main__':
    main()
